# coding: utf-8

"""
    SMCCD Schedule API

    This is SMCCD Schedule API documentation. The API requires basic authentication username and password pair to access the data.  # noqa: E501

    OpenAPI spec version: v1
    Contact: webmaster@smccd.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ApiResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'href': 'str',
        'total_sections': 'int',
        'total_courses': 'int',
        'page': 'int',
        'total_pages': 'int',
        'limit': 'int',
        'query_time': 'str',
        'links': 'ApiResponseLinks',
        'embedded': 'ApiResponseEmbedded'
    }

    attribute_map = {
        'href': 'href',
        'total_sections': 'total_sections',
        'total_courses': 'total_courses',
        'page': 'page',
        'total_pages': 'total_pages',
        'limit': 'limit',
        'query_time': 'query_time',
        'links': '_links',
        'embedded': '_embedded'
    }

    def __init__(self, href=None, total_sections=None, total_courses=None, page=None, total_pages=None, limit=None, query_time=None, links=None, embedded=None):  # noqa: E501
        """ApiResponse - a model defined in Swagger"""  # noqa: E501
        self._href = None
        self._total_sections = None
        self._total_courses = None
        self._page = None
        self._total_pages = None
        self._limit = None
        self._query_time = None
        self._links = None
        self._embedded = None
        self.discriminator = None
        if href is not None:
            self.href = href
        if total_sections is not None:
            self.total_sections = total_sections
        if total_courses is not None:
            self.total_courses = total_courses
        if page is not None:
            self.page = page
        if total_pages is not None:
            self.total_pages = total_pages
        if limit is not None:
            self.limit = limit
        if query_time is not None:
            self.query_time = query_time
        if links is not None:
            self.links = links
        if embedded is not None:
            self.embedded = embedded

    @property
    def href(self):
        """Gets the href of this ApiResponse.  # noqa: E501

        This attribute will only display in hal+xml output  # noqa: E501

        :return: The href of this ApiResponse.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this ApiResponse.

        This attribute will only display in hal+xml output  # noqa: E501

        :param href: The href of this ApiResponse.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def total_sections(self):
        """Gets the total_sections of this ApiResponse.  # noqa: E501

        Total numbers of sections entries for the current query  # noqa: E501

        :return: The total_sections of this ApiResponse.  # noqa: E501
        :rtype: int
        """
        return self._total_sections

    @total_sections.setter
    def total_sections(self, total_sections):
        """Sets the total_sections of this ApiResponse.

        Total numbers of sections entries for the current query  # noqa: E501

        :param total_sections: The total_sections of this ApiResponse.  # noqa: E501
        :type: int
        """

        self._total_sections = total_sections

    @property
    def total_courses(self):
        """Gets the total_courses of this ApiResponse.  # noqa: E501

        Total number of courses matched for the query  # noqa: E501

        :return: The total_courses of this ApiResponse.  # noqa: E501
        :rtype: int
        """
        return self._total_courses

    @total_courses.setter
    def total_courses(self, total_courses):
        """Sets the total_courses of this ApiResponse.

        Total number of courses matched for the query  # noqa: E501

        :param total_courses: The total_courses of this ApiResponse.  # noqa: E501
        :type: int
        """

        self._total_courses = total_courses

    @property
    def page(self):
        """Gets the page of this ApiResponse.  # noqa: E501

        Current page number if the result is paginated  # noqa: E501

        :return: The page of this ApiResponse.  # noqa: E501
        :rtype: int
        """
        return self._page

    @page.setter
    def page(self, page):
        """Sets the page of this ApiResponse.

        Current page number if the result is paginated  # noqa: E501

        :param page: The page of this ApiResponse.  # noqa: E501
        :type: int
        """

        self._page = page

    @property
    def total_pages(self):
        """Gets the total_pages of this ApiResponse.  # noqa: E501

        Total number of pages  # noqa: E501

        :return: The total_pages of this ApiResponse.  # noqa: E501
        :rtype: int
        """
        return self._total_pages

    @total_pages.setter
    def total_pages(self, total_pages):
        """Sets the total_pages of this ApiResponse.

        Total number of pages  # noqa: E501

        :param total_pages: The total_pages of this ApiResponse.  # noqa: E501
        :type: int
        """

        self._total_pages = total_pages

    @property
    def limit(self):
        """Gets the limit of this ApiResponse.  # noqa: E501

        Current courses limit for each paginated result  # noqa: E501

        :return: The limit of this ApiResponse.  # noqa: E501
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this ApiResponse.

        Current courses limit for each paginated result  # noqa: E501

        :param limit: The limit of this ApiResponse.  # noqa: E501
        :type: int
        """

        self._limit = limit

    @property
    def query_time(self):
        """Gets the query_time of this ApiResponse.  # noqa: E501

        The total query time took placed for the current query.  # noqa: E501

        :return: The query_time of this ApiResponse.  # noqa: E501
        :rtype: str
        """
        return self._query_time

    @query_time.setter
    def query_time(self, query_time):
        """Sets the query_time of this ApiResponse.

        The total query time took placed for the current query.  # noqa: E501

        :param query_time: The query_time of this ApiResponse.  # noqa: E501
        :type: str
        """

        self._query_time = query_time

    @property
    def links(self):
        """Gets the links of this ApiResponse.  # noqa: E501


        :return: The links of this ApiResponse.  # noqa: E501
        :rtype: ApiResponseLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this ApiResponse.


        :param links: The links of this ApiResponse.  # noqa: E501
        :type: ApiResponseLinks
        """

        self._links = links

    @property
    def embedded(self):
        """Gets the embedded of this ApiResponse.  # noqa: E501


        :return: The embedded of this ApiResponse.  # noqa: E501
        :rtype: ApiResponseEmbedded
        """
        return self._embedded

    @embedded.setter
    def embedded(self, embedded):
        """Sets the embedded of this ApiResponse.


        :param embedded: The embedded of this ApiResponse.  # noqa: E501
        :type: ApiResponseEmbedded
        """

        self._embedded = embedded

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApiResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

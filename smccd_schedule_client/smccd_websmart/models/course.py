# coding: utf-8

"""
    SMCCD Schedule API

    This is SMCCD Schedule API documentation. The API requires basic authentication username and password pair to access the data.  # noqa: E501

    OpenAPI spec version: v1
    Contact: webmaster@smccd.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Course(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'crn': 'str',
        'subject_code': 'str',
        'course_number': 'str',
        'title': 'str',
        'description': 'str',
        'default_sort_order': 'int',
        'status': 'str',
        'course_types': 'CourseCourseTypes',
        'term': 'CourseTerm',
        'department': 'CourseDepartment',
        'college': 'CourseCollege',
        'enrollment': 'CourseEnrollment',
        'notices': 'CourseNotices',
        'credit': 'CourseCredit',
        'important_dates': 'CourseImportantDates',
        'sections': 'list[Section]',
        'links': 'CourseLinks'
    }

    attribute_map = {
        'crn': 'crn',
        'subject_code': 'subject_code',
        'course_number': 'course_number',
        'title': 'title',
        'description': 'description',
        'default_sort_order': 'default_sort_order',
        'status': 'status',
        'course_types': 'course_types',
        'term': 'term',
        'department': 'department',
        'college': 'college',
        'enrollment': 'enrollment',
        'notices': 'notices',
        'credit': 'credit',
        'important_dates': 'important_dates',
        'sections': 'sections',
        'links': '_links'
    }

    def __init__(self, crn=None, subject_code=None, course_number=None, title=None, description=None, default_sort_order=None, status=None, course_types=None, term=None, department=None, college=None, enrollment=None, notices=None, credit=None, important_dates=None, sections=None, links=None):  # noqa: E501
        """Course - a model defined in Swagger"""  # noqa: E501
        self._crn = None
        self._subject_code = None
        self._course_number = None
        self._title = None
        self._description = None
        self._default_sort_order = None
        self._status = None
        self._course_types = None
        self._term = None
        self._department = None
        self._college = None
        self._enrollment = None
        self._notices = None
        self._credit = None
        self._important_dates = None
        self._sections = None
        self._links = None
        self.discriminator = None
        if crn is not None:
            self.crn = crn
        if subject_code is not None:
            self.subject_code = subject_code
        if course_number is not None:
            self.course_number = course_number
        if title is not None:
            self.title = title
        if description is not None:
            self.description = description
        if default_sort_order is not None:
            self.default_sort_order = default_sort_order
        if status is not None:
            self.status = status
        if course_types is not None:
            self.course_types = course_types
        if term is not None:
            self.term = term
        if department is not None:
            self.department = department
        if college is not None:
            self.college = college
        if enrollment is not None:
            self.enrollment = enrollment
        if notices is not None:
            self.notices = notices
        if credit is not None:
            self.credit = credit
        if important_dates is not None:
            self.important_dates = important_dates
        if sections is not None:
            self.sections = sections
        if links is not None:
            self.links = links

    @property
    def crn(self):
        """Gets the crn of this Course.  # noqa: E501

        CRN number of the course. Annual unique number for a course.  # noqa: E501

        :return: The crn of this Course.  # noqa: E501
        :rtype: str
        """
        return self._crn

    @crn.setter
    def crn(self, crn):
        """Sets the crn of this Course.

        CRN number of the course. Annual unique number for a course.  # noqa: E501

        :param crn: The crn of this Course.  # noqa: E501
        :type: str
        """

        self._crn = crn

    @property
    def subject_code(self):
        """Gets the subject_code of this Course.  # noqa: E501

        Subject code of a course.  # noqa: E501

        :return: The subject_code of this Course.  # noqa: E501
        :rtype: str
        """
        return self._subject_code

    @subject_code.setter
    def subject_code(self, subject_code):
        """Sets the subject_code of this Course.

        Subject code of a course.  # noqa: E501

        :param subject_code: The subject_code of this Course.  # noqa: E501
        :type: str
        """

        self._subject_code = subject_code

    @property
    def course_number(self):
        """Gets the course_number of this Course.  # noqa: E501

        Course number of a course.  # noqa: E501

        :return: The course_number of this Course.  # noqa: E501
        :rtype: str
        """
        return self._course_number

    @course_number.setter
    def course_number(self, course_number):
        """Sets the course_number of this Course.

        Course number of a course.  # noqa: E501

        :param course_number: The course_number of this Course.  # noqa: E501
        :type: str
        """

        self._course_number = course_number

    @property
    def title(self):
        """Gets the title of this Course.  # noqa: E501

        Course title.  # noqa: E501

        :return: The title of this Course.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Course.

        Course title.  # noqa: E501

        :param title: The title of this Course.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def description(self):
        """Gets the description of this Course.  # noqa: E501

        Description of the course.  # noqa: E501

        :return: The description of this Course.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Course.

        Description of the course.  # noqa: E501

        :param description: The description of this Course.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def default_sort_order(self):
        """Gets the default_sort_order of this Course.  # noqa: E501

        Default prefer sort order of the course.  # noqa: E501

        :return: The default_sort_order of this Course.  # noqa: E501
        :rtype: int
        """
        return self._default_sort_order

    @default_sort_order.setter
    def default_sort_order(self, default_sort_order):
        """Sets the default_sort_order of this Course.

        Default prefer sort order of the course.  # noqa: E501

        :param default_sort_order: The default_sort_order of this Course.  # noqa: E501
        :type: int
        """

        self._default_sort_order = default_sort_order

    @property
    def status(self):
        """Gets the status of this Course.  # noqa: E501

        Status of the course.  # noqa: E501

        :return: The status of this Course.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Course.

        Status of the course.  # noqa: E501

        :param status: The status of this Course.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def course_types(self):
        """Gets the course_types of this Course.  # noqa: E501


        :return: The course_types of this Course.  # noqa: E501
        :rtype: CourseCourseTypes
        """
        return self._course_types

    @course_types.setter
    def course_types(self, course_types):
        """Sets the course_types of this Course.


        :param course_types: The course_types of this Course.  # noqa: E501
        :type: CourseCourseTypes
        """

        self._course_types = course_types

    @property
    def term(self):
        """Gets the term of this Course.  # noqa: E501


        :return: The term of this Course.  # noqa: E501
        :rtype: CourseTerm
        """
        return self._term

    @term.setter
    def term(self, term):
        """Sets the term of this Course.


        :param term: The term of this Course.  # noqa: E501
        :type: CourseTerm
        """

        self._term = term

    @property
    def department(self):
        """Gets the department of this Course.  # noqa: E501


        :return: The department of this Course.  # noqa: E501
        :rtype: CourseDepartment
        """
        return self._department

    @department.setter
    def department(self, department):
        """Sets the department of this Course.


        :param department: The department of this Course.  # noqa: E501
        :type: CourseDepartment
        """

        self._department = department

    @property
    def college(self):
        """Gets the college of this Course.  # noqa: E501


        :return: The college of this Course.  # noqa: E501
        :rtype: CourseCollege
        """
        return self._college

    @college.setter
    def college(self, college):
        """Sets the college of this Course.


        :param college: The college of this Course.  # noqa: E501
        :type: CourseCollege
        """

        self._college = college

    @property
    def enrollment(self):
        """Gets the enrollment of this Course.  # noqa: E501


        :return: The enrollment of this Course.  # noqa: E501
        :rtype: CourseEnrollment
        """
        return self._enrollment

    @enrollment.setter
    def enrollment(self, enrollment):
        """Sets the enrollment of this Course.


        :param enrollment: The enrollment of this Course.  # noqa: E501
        :type: CourseEnrollment
        """

        self._enrollment = enrollment

    @property
    def notices(self):
        """Gets the notices of this Course.  # noqa: E501


        :return: The notices of this Course.  # noqa: E501
        :rtype: CourseNotices
        """
        return self._notices

    @notices.setter
    def notices(self, notices):
        """Sets the notices of this Course.


        :param notices: The notices of this Course.  # noqa: E501
        :type: CourseNotices
        """

        self._notices = notices

    @property
    def credit(self):
        """Gets the credit of this Course.  # noqa: E501


        :return: The credit of this Course.  # noqa: E501
        :rtype: CourseCredit
        """
        return self._credit

    @credit.setter
    def credit(self, credit):
        """Sets the credit of this Course.


        :param credit: The credit of this Course.  # noqa: E501
        :type: CourseCredit
        """

        self._credit = credit

    @property
    def important_dates(self):
        """Gets the important_dates of this Course.  # noqa: E501


        :return: The important_dates of this Course.  # noqa: E501
        :rtype: CourseImportantDates
        """
        return self._important_dates

    @important_dates.setter
    def important_dates(self, important_dates):
        """Sets the important_dates of this Course.


        :param important_dates: The important_dates of this Course.  # noqa: E501
        :type: CourseImportantDates
        """

        self._important_dates = important_dates

    @property
    def sections(self):
        """Gets the sections of this Course.  # noqa: E501


        :return: The sections of this Course.  # noqa: E501
        :rtype: list[Section]
        """
        return self._sections

    @sections.setter
    def sections(self, sections):
        """Sets the sections of this Course.


        :param sections: The sections of this Course.  # noqa: E501
        :type: list[Section]
        """

        self._sections = sections

    @property
    def links(self):
        """Gets the links of this Course.  # noqa: E501


        :return: The links of this Course.  # noqa: E501
        :rtype: CourseLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Course.


        :param links: The links of this Course.  # noqa: E501
        :type: CourseLinks
        """

        self._links = links

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Course, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Course):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

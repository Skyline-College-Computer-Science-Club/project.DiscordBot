# coding: utf-8

"""
    SMCCD Schedule API

    This is SMCCD Schedule API documentation. The API requires basic authentication username and password pair to access the data.  # noqa: E501

    OpenAPI spec version: v1
    Contact: webmaster@smccd.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CourseCollege(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'college_code': 'str',
        'college_desc': 'str'
    }

    attribute_map = {
        'college_code': 'college_code',
        'college_desc': 'college_desc'
    }

    def __init__(self, college_code=None, college_desc=None):  # noqa: E501
        """CourseCollege - a model defined in Swagger"""  # noqa: E501
        self._college_code = None
        self._college_desc = None
        self.discriminator = None
        if college_code is not None:
            self.college_code = college_code
        if college_desc is not None:
            self.college_desc = college_desc

    @property
    def college_code(self):
        """Gets the college_code of this CourseCollege.  # noqa: E501

        College code.  # noqa: E501

        :return: The college_code of this CourseCollege.  # noqa: E501
        :rtype: str
        """
        return self._college_code

    @college_code.setter
    def college_code(self, college_code):
        """Sets the college_code of this CourseCollege.

        College code.  # noqa: E501

        :param college_code: The college_code of this CourseCollege.  # noqa: E501
        :type: str
        """

        self._college_code = college_code

    @property
    def college_desc(self):
        """Gets the college_desc of this CourseCollege.  # noqa: E501

        College name.  # noqa: E501

        :return: The college_desc of this CourseCollege.  # noqa: E501
        :rtype: str
        """
        return self._college_desc

    @college_desc.setter
    def college_desc(self, college_desc):
        """Sets the college_desc of this CourseCollege.

        College name.  # noqa: E501

        :param college_desc: The college_desc of this CourseCollege.  # noqa: E501
        :type: str
        """

        self._college_desc = college_desc

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CourseCollege, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CourseCollege):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

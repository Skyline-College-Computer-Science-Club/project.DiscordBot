# coding: utf-8

"""
    SMCCD Schedule API

    This is SMCCD Schedule API documentation. The API requires basic authentication username and password pair to access the data.  # noqa: E501

    OpenAPI spec version: v1
    Contact: webmaster@smccd.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CourseLinks(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_self': 'CourseLinksSelf',
        'webschedule': 'CourseLinksSelf',
        'textbook': 'CourseLinksSelf',
        'crn_url': 'CourseLinksSelf'
    }

    attribute_map = {
        '_self': 'self',
        'webschedule': 'webschedule',
        'textbook': 'textbook',
        'crn_url': 'crn_url'
    }

    def __init__(self, _self=None, webschedule=None, textbook=None, crn_url=None):  # noqa: E501
        """CourseLinks - a model defined in Swagger"""  # noqa: E501
        self.__self = None
        self._webschedule = None
        self._textbook = None
        self._crn_url = None
        self.discriminator = None
        if _self is not None:
            self._self = _self
        if webschedule is not None:
            self.webschedule = webschedule
        if textbook is not None:
            self.textbook = textbook
        if crn_url is not None:
            self.crn_url = crn_url

    @property
    def _self(self):
        """Gets the _self of this CourseLinks.  # noqa: E501


        :return: The _self of this CourseLinks.  # noqa: E501
        :rtype: CourseLinksSelf
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this CourseLinks.


        :param _self: The _self of this CourseLinks.  # noqa: E501
        :type: CourseLinksSelf
        """

        self.__self = _self

    @property
    def webschedule(self):
        """Gets the webschedule of this CourseLinks.  # noqa: E501


        :return: The webschedule of this CourseLinks.  # noqa: E501
        :rtype: CourseLinksSelf
        """
        return self._webschedule

    @webschedule.setter
    def webschedule(self, webschedule):
        """Sets the webschedule of this CourseLinks.


        :param webschedule: The webschedule of this CourseLinks.  # noqa: E501
        :type: CourseLinksSelf
        """

        self._webschedule = webschedule

    @property
    def textbook(self):
        """Gets the textbook of this CourseLinks.  # noqa: E501


        :return: The textbook of this CourseLinks.  # noqa: E501
        :rtype: CourseLinksSelf
        """
        return self._textbook

    @textbook.setter
    def textbook(self, textbook):
        """Sets the textbook of this CourseLinks.


        :param textbook: The textbook of this CourseLinks.  # noqa: E501
        :type: CourseLinksSelf
        """

        self._textbook = textbook

    @property
    def crn_url(self):
        """Gets the crn_url of this CourseLinks.  # noqa: E501


        :return: The crn_url of this CourseLinks.  # noqa: E501
        :rtype: CourseLinksSelf
        """
        return self._crn_url

    @crn_url.setter
    def crn_url(self, crn_url):
        """Sets the crn_url of this CourseLinks.


        :param crn_url: The crn_url of this CourseLinks.  # noqa: E501
        :type: CourseLinksSelf
        """

        self._crn_url = crn_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CourseLinks, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CourseLinks):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

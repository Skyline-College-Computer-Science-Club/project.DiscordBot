# coding: utf-8

"""
    SMCCD Schedule API

    This is SMCCD Schedule API documentation. The API requires basic authentication username and password pair to access the data.  # noqa: E501

    OpenAPI spec version: v1
    Contact: webmaster@smccd.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CourseImportantDates(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'last_day_to_add': 'datetime',
        'last_day_with_refund': 'datetime',
        'last_day_without_w_grade': 'datetime',
        'last_day_with_w_grade': 'datetime'
    }

    attribute_map = {
        'last_day_to_add': 'last_day_to_add',
        'last_day_with_refund': 'last_day_with_refund',
        'last_day_without_w_grade': 'last_day_without_w_grade',
        'last_day_with_w_grade': 'last_day_with_w_grade'
    }

    def __init__(self, last_day_to_add=None, last_day_with_refund=None, last_day_without_w_grade=None, last_day_with_w_grade=None):  # noqa: E501
        """CourseImportantDates - a model defined in Swagger"""  # noqa: E501
        self._last_day_to_add = None
        self._last_day_with_refund = None
        self._last_day_without_w_grade = None
        self._last_day_with_w_grade = None
        self.discriminator = None
        if last_day_to_add is not None:
            self.last_day_to_add = last_day_to_add
        if last_day_with_refund is not None:
            self.last_day_with_refund = last_day_with_refund
        if last_day_without_w_grade is not None:
            self.last_day_without_w_grade = last_day_without_w_grade
        if last_day_with_w_grade is not None:
            self.last_day_with_w_grade = last_day_with_w_grade

    @property
    def last_day_to_add(self):
        """Gets the last_day_to_add of this CourseImportantDates.  # noqa: E501

        Last day to add the course.  # noqa: E501

        :return: The last_day_to_add of this CourseImportantDates.  # noqa: E501
        :rtype: datetime
        """
        return self._last_day_to_add

    @last_day_to_add.setter
    def last_day_to_add(self, last_day_to_add):
        """Sets the last_day_to_add of this CourseImportantDates.

        Last day to add the course.  # noqa: E501

        :param last_day_to_add: The last_day_to_add of this CourseImportantDates.  # noqa: E501
        :type: datetime
        """

        self._last_day_to_add = last_day_to_add

    @property
    def last_day_with_refund(self):
        """Gets the last_day_with_refund of this CourseImportantDates.  # noqa: E501

        Last day to drop the course with refund.  # noqa: E501

        :return: The last_day_with_refund of this CourseImportantDates.  # noqa: E501
        :rtype: datetime
        """
        return self._last_day_with_refund

    @last_day_with_refund.setter
    def last_day_with_refund(self, last_day_with_refund):
        """Sets the last_day_with_refund of this CourseImportantDates.

        Last day to drop the course with refund.  # noqa: E501

        :param last_day_with_refund: The last_day_with_refund of this CourseImportantDates.  # noqa: E501
        :type: datetime
        """

        self._last_day_with_refund = last_day_with_refund

    @property
    def last_day_without_w_grade(self):
        """Gets the last_day_without_w_grade of this CourseImportantDates.  # noqa: E501

        Last day to drop the course without W (withdraw) grade.  # noqa: E501

        :return: The last_day_without_w_grade of this CourseImportantDates.  # noqa: E501
        :rtype: datetime
        """
        return self._last_day_without_w_grade

    @last_day_without_w_grade.setter
    def last_day_without_w_grade(self, last_day_without_w_grade):
        """Sets the last_day_without_w_grade of this CourseImportantDates.

        Last day to drop the course without W (withdraw) grade.  # noqa: E501

        :param last_day_without_w_grade: The last_day_without_w_grade of this CourseImportantDates.  # noqa: E501
        :type: datetime
        """

        self._last_day_without_w_grade = last_day_without_w_grade

    @property
    def last_day_with_w_grade(self):
        """Gets the last_day_with_w_grade of this CourseImportantDates.  # noqa: E501

        Last day to drop the course with W (withdraw) grade.  # noqa: E501

        :return: The last_day_with_w_grade of this CourseImportantDates.  # noqa: E501
        :rtype: datetime
        """
        return self._last_day_with_w_grade

    @last_day_with_w_grade.setter
    def last_day_with_w_grade(self, last_day_with_w_grade):
        """Sets the last_day_with_w_grade of this CourseImportantDates.

        Last day to drop the course with W (withdraw) grade.  # noqa: E501

        :param last_day_with_w_grade: The last_day_with_w_grade of this CourseImportantDates.  # noqa: E501
        :type: datetime
        """

        self._last_day_with_w_grade = last_day_with_w_grade

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CourseImportantDates, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CourseImportantDates):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    SMCCD Schedule API

    This is SMCCD Schedule API documentation. The API requires basic authentication username and password pair to access the data.  # noqa: E501

    OpenAPI spec version: v1
    Contact: webmaster@smccd.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CourseCredit(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'credit_units_low': 'str',
        'credit_units_indicator': 'str',
        'credit_units_high': 'str',
        'transfer': 'CourseCreditTransfer'
    }

    attribute_map = {
        'credit_units_low': 'credit_units_low',
        'credit_units_indicator': 'credit_units_indicator',
        'credit_units_high': 'credit_units_high',
        'transfer': 'transfer'
    }

    def __init__(self, credit_units_low=None, credit_units_indicator=None, credit_units_high=None, transfer=None):  # noqa: E501
        """CourseCredit - a model defined in Swagger"""  # noqa: E501
        self._credit_units_low = None
        self._credit_units_indicator = None
        self._credit_units_high = None
        self._transfer = None
        self.discriminator = None
        if credit_units_low is not None:
            self.credit_units_low = credit_units_low
        if credit_units_indicator is not None:
            self.credit_units_indicator = credit_units_indicator
        if credit_units_high is not None:
            self.credit_units_high = credit_units_high
        if transfer is not None:
            self.transfer = transfer

    @property
    def credit_units_low(self):
        """Gets the credit_units_low of this CourseCredit.  # noqa: E501

        Minimum credit units offers by the course.  # noqa: E501

        :return: The credit_units_low of this CourseCredit.  # noqa: E501
        :rtype: str
        """
        return self._credit_units_low

    @credit_units_low.setter
    def credit_units_low(self, credit_units_low):
        """Sets the credit_units_low of this CourseCredit.

        Minimum credit units offers by the course.  # noqa: E501

        :param credit_units_low: The credit_units_low of this CourseCredit.  # noqa: E501
        :type: str
        """

        self._credit_units_low = credit_units_low

    @property
    def credit_units_indicator(self):
        """Gets the credit_units_indicator of this CourseCredit.  # noqa: E501

        Indicator between credit units low and high values.  # noqa: E501

        :return: The credit_units_indicator of this CourseCredit.  # noqa: E501
        :rtype: str
        """
        return self._credit_units_indicator

    @credit_units_indicator.setter
    def credit_units_indicator(self, credit_units_indicator):
        """Sets the credit_units_indicator of this CourseCredit.

        Indicator between credit units low and high values.  # noqa: E501

        :param credit_units_indicator: The credit_units_indicator of this CourseCredit.  # noqa: E501
        :type: str
        """

        self._credit_units_indicator = credit_units_indicator

    @property
    def credit_units_high(self):
        """Gets the credit_units_high of this CourseCredit.  # noqa: E501

        Maximum credit units offers by the course.  # noqa: E501

        :return: The credit_units_high of this CourseCredit.  # noqa: E501
        :rtype: str
        """
        return self._credit_units_high

    @credit_units_high.setter
    def credit_units_high(self, credit_units_high):
        """Sets the credit_units_high of this CourseCredit.

        Maximum credit units offers by the course.  # noqa: E501

        :param credit_units_high: The credit_units_high of this CourseCredit.  # noqa: E501
        :type: str
        """

        self._credit_units_high = credit_units_high

    @property
    def transfer(self):
        """Gets the transfer of this CourseCredit.  # noqa: E501


        :return: The transfer of this CourseCredit.  # noqa: E501
        :rtype: CourseCreditTransfer
        """
        return self._transfer

    @transfer.setter
    def transfer(self, transfer):
        """Sets the transfer of this CourseCredit.


        :param transfer: The transfer of this CourseCredit.  # noqa: E501
        :type: CourseCreditTransfer
        """

        self._transfer = transfer

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CourseCredit, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CourseCredit):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

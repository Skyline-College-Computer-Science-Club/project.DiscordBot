# coding: utf-8

"""
    SMCCD Schedule API

    This is SMCCD Schedule API documentation. The API requires basic authentication username and password pair to access the data.  # noqa: E501

    OpenAPI spec version: v1
    Contact: webmaster@smccd.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CourseEnrollment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'enroll_count_section': 'int',
        'max_enroll_section': 'int',
        'wait_capacity': 'int',
        'wait_count': 'int'
    }

    attribute_map = {
        'enroll_count_section': 'enroll_count_section',
        'max_enroll_section': 'max_enroll_section',
        'wait_capacity': 'wait_capacity',
        'wait_count': 'wait_count'
    }

    def __init__(self, enroll_count_section=None, max_enroll_section=None, wait_capacity=None, wait_count=None):  # noqa: E501
        """CourseEnrollment - a model defined in Swagger"""  # noqa: E501
        self._enroll_count_section = None
        self._max_enroll_section = None
        self._wait_capacity = None
        self._wait_count = None
        self.discriminator = None
        if enroll_count_section is not None:
            self.enroll_count_section = enroll_count_section
        if max_enroll_section is not None:
            self.max_enroll_section = max_enroll_section
        if wait_capacity is not None:
            self.wait_capacity = wait_capacity
        if wait_count is not None:
            self.wait_count = wait_count

    @property
    def enroll_count_section(self):
        """Gets the enroll_count_section of this CourseEnrollment.  # noqa: E501

        Current number of students enrolled in the class  # noqa: E501

        :return: The enroll_count_section of this CourseEnrollment.  # noqa: E501
        :rtype: int
        """
        return self._enroll_count_section

    @enroll_count_section.setter
    def enroll_count_section(self, enroll_count_section):
        """Sets the enroll_count_section of this CourseEnrollment.

        Current number of students enrolled in the class  # noqa: E501

        :param enroll_count_section: The enroll_count_section of this CourseEnrollment.  # noqa: E501
        :type: int
        """

        self._enroll_count_section = enroll_count_section

    @property
    def max_enroll_section(self):
        """Gets the max_enroll_section of this CourseEnrollment.  # noqa: E501

        Maximum number of students allowed to enroll in the class  # noqa: E501

        :return: The max_enroll_section of this CourseEnrollment.  # noqa: E501
        :rtype: int
        """
        return self._max_enroll_section

    @max_enroll_section.setter
    def max_enroll_section(self, max_enroll_section):
        """Sets the max_enroll_section of this CourseEnrollment.

        Maximum number of students allowed to enroll in the class  # noqa: E501

        :param max_enroll_section: The max_enroll_section of this CourseEnrollment.  # noqa: E501
        :type: int
        """

        self._max_enroll_section = max_enroll_section

    @property
    def wait_capacity(self):
        """Gets the wait_capacity of this CourseEnrollment.  # noqa: E501

        Maximum number of waiting list capacity.  # noqa: E501

        :return: The wait_capacity of this CourseEnrollment.  # noqa: E501
        :rtype: int
        """
        return self._wait_capacity

    @wait_capacity.setter
    def wait_capacity(self, wait_capacity):
        """Sets the wait_capacity of this CourseEnrollment.

        Maximum number of waiting list capacity.  # noqa: E501

        :param wait_capacity: The wait_capacity of this CourseEnrollment.  # noqa: E501
        :type: int
        """

        self._wait_capacity = wait_capacity

    @property
    def wait_count(self):
        """Gets the wait_count of this CourseEnrollment.  # noqa: E501

        Current number of students in the waiting list.  # noqa: E501

        :return: The wait_count of this CourseEnrollment.  # noqa: E501
        :rtype: int
        """
        return self._wait_count

    @wait_count.setter
    def wait_count(self, wait_count):
        """Sets the wait_count of this CourseEnrollment.

        Current number of students in the waiting list.  # noqa: E501

        :param wait_count: The wait_count of this CourseEnrollment.  # noqa: E501
        :type: int
        """

        self._wait_count = wait_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CourseEnrollment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CourseEnrollment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

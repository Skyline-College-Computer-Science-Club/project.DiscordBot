# coding: utf-8

"""
    SMCCD Schedule API

    This is SMCCD Schedule API documentation. The API requires basic authentication username and password pair to access the data.  # noqa: E501

    OpenAPI spec version: v1
    Contact: webmaster@smccd.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CourseCourseTypes(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'day_or_evening_code': 'str',
        'honor': 'bool',
        'hybrid': 'bool',
        'webbased': 'bool',
        'xlo': 'bool',
        'learning_community': 'bool',
        'spanish': 'bool',
        'hmb': 'bool',
        'offsite_ind': 'bool',
        'supplemental_instruction': 'bool',
        'fast_track_transfer': 'bool'
    }

    attribute_map = {
        'day_or_evening_code': 'day_or_evening_code',
        'honor': 'honor',
        'hybrid': 'hybrid',
        'webbased': 'webbased',
        'xlo': 'xlo',
        'learning_community': 'learning_community',
        'spanish': 'spanish',
        'hmb': 'hmb',
        'offsite_ind': 'offsite_ind',
        'supplemental_instruction': 'supplemental_instruction',
        'fast_track_transfer': 'fast_track_transfer'
    }

    def __init__(self, day_or_evening_code=None, honor=None, hybrid=None, webbased=None, xlo=None, learning_community=None, spanish=None, hmb=None, offsite_ind=None, supplemental_instruction=None, fast_track_transfer=None):  # noqa: E501
        """CourseCourseTypes - a model defined in Swagger"""  # noqa: E501
        self._day_or_evening_code = None
        self._honor = None
        self._hybrid = None
        self._webbased = None
        self._xlo = None
        self._learning_community = None
        self._spanish = None
        self._hmb = None
        self._offsite_ind = None
        self._supplemental_instruction = None
        self._fast_track_transfer = None
        self.discriminator = None
        if day_or_evening_code is not None:
            self.day_or_evening_code = day_or_evening_code
        if honor is not None:
            self.honor = honor
        if hybrid is not None:
            self.hybrid = hybrid
        if webbased is not None:
            self.webbased = webbased
        if xlo is not None:
            self.xlo = xlo
        if learning_community is not None:
            self.learning_community = learning_community
        if spanish is not None:
            self.spanish = spanish
        if hmb is not None:
            self.hmb = hmb
        if offsite_ind is not None:
            self.offsite_ind = offsite_ind
        if supplemental_instruction is not None:
            self.supplemental_instruction = supplemental_instruction
        if fast_track_transfer is not None:
            self.fast_track_transfer = fast_track_transfer

    @property
    def day_or_evening_code(self):
        """Gets the day_or_evening_code of this CourseCourseTypes.  # noqa: E501

        Day time or Evening time of the course schedule.  # noqa: E501

        :return: The day_or_evening_code of this CourseCourseTypes.  # noqa: E501
        :rtype: str
        """
        return self._day_or_evening_code

    @day_or_evening_code.setter
    def day_or_evening_code(self, day_or_evening_code):
        """Sets the day_or_evening_code of this CourseCourseTypes.

        Day time or Evening time of the course schedule.  # noqa: E501

        :param day_or_evening_code: The day_or_evening_code of this CourseCourseTypes.  # noqa: E501
        :type: str
        """

        self._day_or_evening_code = day_or_evening_code

    @property
    def honor(self):
        """Gets the honor of this CourseCourseTypes.  # noqa: E501

        true if the course is an honor course.  # noqa: E501

        :return: The honor of this CourseCourseTypes.  # noqa: E501
        :rtype: bool
        """
        return self._honor

    @honor.setter
    def honor(self, honor):
        """Sets the honor of this CourseCourseTypes.

        true if the course is an honor course.  # noqa: E501

        :param honor: The honor of this CourseCourseTypes.  # noqa: E501
        :type: bool
        """

        self._honor = honor

    @property
    def hybrid(self):
        """Gets the hybrid of this CourseCourseTypes.  # noqa: E501

        true if the course is a hybrid course, a course mixed with online and in class sections.  # noqa: E501

        :return: The hybrid of this CourseCourseTypes.  # noqa: E501
        :rtype: bool
        """
        return self._hybrid

    @hybrid.setter
    def hybrid(self, hybrid):
        """Sets the hybrid of this CourseCourseTypes.

        true if the course is a hybrid course, a course mixed with online and in class sections.  # noqa: E501

        :param hybrid: The hybrid of this CourseCourseTypes.  # noqa: E501
        :type: bool
        """

        self._hybrid = hybrid

    @property
    def webbased(self):
        """Gets the webbased of this CourseCourseTypes.  # noqa: E501

        true if the course is fully online course.  # noqa: E501

        :return: The webbased of this CourseCourseTypes.  # noqa: E501
        :rtype: bool
        """
        return self._webbased

    @webbased.setter
    def webbased(self, webbased):
        """Sets the webbased of this CourseCourseTypes.

        true if the course is fully online course.  # noqa: E501

        :param webbased: The webbased of this CourseCourseTypes.  # noqa: E501
        :type: bool
        """

        self._webbased = webbased

    @property
    def xlo(self):
        """Gets the xlo of this CourseCourseTypes.  # noqa: E501

        true if the course is fully online course, which accept up to 100 registered students, offer free semester-length online tutoring, and allow guest access.  # noqa: E501

        :return: The xlo of this CourseCourseTypes.  # noqa: E501
        :rtype: bool
        """
        return self._xlo

    @xlo.setter
    def xlo(self, xlo):
        """Sets the xlo of this CourseCourseTypes.

        true if the course is fully online course, which accept up to 100 registered students, offer free semester-length online tutoring, and allow guest access.  # noqa: E501

        :param xlo: The xlo of this CourseCourseTypes.  # noqa: E501
        :type: bool
        """

        self._xlo = xlo

    @property
    def learning_community(self):
        """Gets the learning_community of this CourseCourseTypes.  # noqa: E501

        true if the course is learning community course.  # noqa: E501

        :return: The learning_community of this CourseCourseTypes.  # noqa: E501
        :rtype: bool
        """
        return self._learning_community

    @learning_community.setter
    def learning_community(self, learning_community):
        """Sets the learning_community of this CourseCourseTypes.

        true if the course is learning community course.  # noqa: E501

        :param learning_community: The learning_community of this CourseCourseTypes.  # noqa: E501
        :type: bool
        """

        self._learning_community = learning_community

    @property
    def spanish(self):
        """Gets the spanish of this CourseCourseTypes.  # noqa: E501

        true if the course is taught in Spanish.  # noqa: E501

        :return: The spanish of this CourseCourseTypes.  # noqa: E501
        :rtype: bool
        """
        return self._spanish

    @spanish.setter
    def spanish(self, spanish):
        """Sets the spanish of this CourseCourseTypes.

        true if the course is taught in Spanish.  # noqa: E501

        :param spanish: The spanish of this CourseCourseTypes.  # noqa: E501
        :type: bool
        """

        self._spanish = spanish

    @property
    def hmb(self):
        """Gets the hmb of this CourseCourseTypes.  # noqa: E501

        true if the course is in Half Moon Bay campus.  # noqa: E501

        :return: The hmb of this CourseCourseTypes.  # noqa: E501
        :rtype: bool
        """
        return self._hmb

    @hmb.setter
    def hmb(self, hmb):
        """Sets the hmb of this CourseCourseTypes.

        true if the course is in Half Moon Bay campus.  # noqa: E501

        :param hmb: The hmb of this CourseCourseTypes.  # noqa: E501
        :type: bool
        """

        self._hmb = hmb

    @property
    def offsite_ind(self):
        """Gets the offsite_ind of this CourseCourseTypes.  # noqa: E501

        true if the course is in offsite.  # noqa: E501

        :return: The offsite_ind of this CourseCourseTypes.  # noqa: E501
        :rtype: bool
        """
        return self._offsite_ind

    @offsite_ind.setter
    def offsite_ind(self, offsite_ind):
        """Sets the offsite_ind of this CourseCourseTypes.

        true if the course is in offsite.  # noqa: E501

        :param offsite_ind: The offsite_ind of this CourseCourseTypes.  # noqa: E501
        :type: bool
        """

        self._offsite_ind = offsite_ind

    @property
    def supplemental_instruction(self):
        """Gets the supplemental_instruction of this CourseCourseTypes.  # noqa: E501

        true if the course has supplemental instruction.  # noqa: E501

        :return: The supplemental_instruction of this CourseCourseTypes.  # noqa: E501
        :rtype: bool
        """
        return self._supplemental_instruction

    @supplemental_instruction.setter
    def supplemental_instruction(self, supplemental_instruction):
        """Sets the supplemental_instruction of this CourseCourseTypes.

        true if the course has supplemental instruction.  # noqa: E501

        :param supplemental_instruction: The supplemental_instruction of this CourseCourseTypes.  # noqa: E501
        :type: bool
        """

        self._supplemental_instruction = supplemental_instruction

    @property
    def fast_track_transfer(self):
        """Gets the fast_track_transfer of this CourseCourseTypes.  # noqa: E501

        true if the course is a fast track transferable.  # noqa: E501

        :return: The fast_track_transfer of this CourseCourseTypes.  # noqa: E501
        :rtype: bool
        """
        return self._fast_track_transfer

    @fast_track_transfer.setter
    def fast_track_transfer(self, fast_track_transfer):
        """Sets the fast_track_transfer of this CourseCourseTypes.

        true if the course is a fast track transferable.  # noqa: E501

        :param fast_track_transfer: The fast_track_transfer of this CourseCourseTypes.  # noqa: E501
        :type: bool
        """

        self._fast_track_transfer = fast_track_transfer

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CourseCourseTypes, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CourseCourseTypes):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    SMCCD Schedule API

    This is SMCCD Schedule API documentation. The API requires basic authentication username and password pair to access the data.  # noqa: E501

    OpenAPI spec version: v1
    Contact: webmaster@smccd.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from smccd_websmart.api_client import ApiClient


class CoursesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_courses_by_crn(self, crn, **kwargs):  # noqa: E501
        """Get course with CRN  # noqa: E501

        Returns a single course within available terms  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_courses_by_crn(crn, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float crn: CRN number of the course (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_courses_by_crn_with_http_info(crn, **kwargs)  # noqa: E501
        else:
            (data) = self.get_courses_by_crn_with_http_info(crn, **kwargs)  # noqa: E501
            return data

    def get_courses_by_crn_with_http_info(self, crn, **kwargs):  # noqa: E501
        """Get course with CRN  # noqa: E501

        Returns a single course within available terms  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_courses_by_crn_with_http_info(crn, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float crn: CRN number of the course (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['crn']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_courses_by_crn" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'crn' is set
        if ('crn' not in params or
                params['crn'] is None):
            raise ValueError("Missing the required parameter `crn` when calling `get_courses_by_crn`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'crn' in params:
            path_params['crn'] = params['crn']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+xml', 'application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['directory_auth']  # noqa: E501

        return self.api_client.call_api(
            '/courses/{crn}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_courses_by_query(self, **kwargs):  # noqa: E501
        """List courses with optional query parameters  # noqa: E501

        Returns a paged collection of 20 courses by default  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_courses_by_query(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float limit: Limiting number of courses to return.    * Default is set to `20`. Setting `-1` will returns all courses and sections information from currently available terms.
        :param float page: Page number.   * To get the courses list starts from `101th` course to `120th` course, set      `page=6`. Calaculated as `6 x 20` (`20` is the default limit value).   * To get the 55<sup>th</sup> course will need to combine with `limit` filter.     `page=55&limit=1` 
        :param str s: Get coursess by search keywords in CRN, Department, Subject code, Course number, Instructor first name, and Instructor last name. 
        :param list[float] crn: Get courses by CRN.   URL query string can be in a single number (or) in comma seperated string (or) multiple of `crn[]` values. * `crn=50001` (or) `crn=50001, 50003` (or) `crn[]=50001&crn[]=50003`. 
        :param list[float] college_code: Get courses by college code.   URL query string can be in a single number (or) in comma seperated string (or) multiple of `college_code[]` values.   * `college_code = 2` (or) `college_code = 2, 3` (or) `college_code[]=2&college_code[]=3`.   * *Only one `college_code` or `college_desc` should be in the query. `college_code` will be prioritized over `college_desc`.* 
        :param list[str] college_desc: Get courses by college description.   URL query string can be in a single string (or) in comma seperated string (or) multiple of `college_desc[]` values.    * `college_desc = skyline college` (or) `college_desc = skyline college, canada college` (or) `college_desc[]=skyline college&college_desc[]=canada college`.   * *Only one `college_code` or `college_desc` should be in the query. `college_code` will be prioritized over `college_desc`.* 
        :param list[float] term_code: Get course by term code.   URL query string can be in a single number (or) in comma seperated string (or) multiple of `term_code[]` values.   * `term_code = 201705` (or) `term_code = 201705, 201708` (or) `term_code[]=201705&term_code[]=201708`. 
        :param list[str] term_desc: Get course by term description.   URL query string can be in a single string (or) in comma seperated string (or) multiple of `term_desc[]` values.   * `term_desc = Summer 2017` (or) `term_code = Summer 2017, Fall 2017` (or) `term_desc[]=Summer 2017&term_desc[]=Fall 2017`. 
        :param str department_desc: Get course by department description. Query string must be in a single string value. 
        :param list[str] course_types: Get courses by course types. Available course types are - honor, hybrid, webbased, xlo, spanish, offsite_ind, supplemental_instruction, learning_community, fast_track_transfer. 
        :param str instructor: Get courses by Instructor first or last name. 
        :param str instructor_first_name: Get courses by Instructor First name. 
        :param str instructor_last_name: Get courses by Instructor Last name. 
        :param str day: Get courses by Day class time. 
        :param str evening: Get courses by Evening class time. 
        :param str day_or_evening_code: Get courses by Day or Evening class time. 
        :param list[str] days: Get courses by Days of a week. 
        :param float units: Get courses by units. 
        :param float min_units: Get courses by minimum units. 
        :param float max_units: Get courses by maximum units. 
        :param str meet_begin_time: Get courses by meeting begin time. The time values are in 4 digits 24 hours format. 8am will be 0800 and 4.30pm will be 1630. 
        :param float meet_end_time: Get courses by meeting end time. The time values are in 4 digits 24 hours format. 8am will be 0800 and 4.30pm will be 1630. 
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_courses_by_query_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_courses_by_query_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_courses_by_query_with_http_info(self, **kwargs):  # noqa: E501
        """List courses with optional query parameters  # noqa: E501

        Returns a paged collection of 20 courses by default  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_courses_by_query_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float limit: Limiting number of courses to return.    * Default is set to `20`. Setting `-1` will returns all courses and sections information from currently available terms.
        :param float page: Page number.   * To get the courses list starts from `101th` course to `120th` course, set      `page=6`. Calaculated as `6 x 20` (`20` is the default limit value).   * To get the 55<sup>th</sup> course will need to combine with `limit` filter.     `page=55&limit=1` 
        :param str s: Get coursess by search keywords in CRN, Department, Subject code, Course number, Instructor first name, and Instructor last name. 
        :param list[float] crn: Get courses by CRN.   URL query string can be in a single number (or) in comma seperated string (or) multiple of `crn[]` values. * `crn=50001` (or) `crn=50001, 50003` (or) `crn[]=50001&crn[]=50003`. 
        :param list[float] college_code: Get courses by college code.   URL query string can be in a single number (or) in comma seperated string (or) multiple of `college_code[]` values.   * `college_code = 2` (or) `college_code = 2, 3` (or) `college_code[]=2&college_code[]=3`.   * *Only one `college_code` or `college_desc` should be in the query. `college_code` will be prioritized over `college_desc`.* 
        :param list[str] college_desc: Get courses by college description.   URL query string can be in a single string (or) in comma seperated string (or) multiple of `college_desc[]` values.    * `college_desc = skyline college` (or) `college_desc = skyline college, canada college` (or) `college_desc[]=skyline college&college_desc[]=canada college`.   * *Only one `college_code` or `college_desc` should be in the query. `college_code` will be prioritized over `college_desc`.* 
        :param list[float] term_code: Get course by term code.   URL query string can be in a single number (or) in comma seperated string (or) multiple of `term_code[]` values.   * `term_code = 201705` (or) `term_code = 201705, 201708` (or) `term_code[]=201705&term_code[]=201708`. 
        :param list[str] term_desc: Get course by term description.   URL query string can be in a single string (or) in comma seperated string (or) multiple of `term_desc[]` values.   * `term_desc = Summer 2017` (or) `term_code = Summer 2017, Fall 2017` (or) `term_desc[]=Summer 2017&term_desc[]=Fall 2017`. 
        :param str department_desc: Get course by department description. Query string must be in a single string value. 
        :param list[str] course_types: Get courses by course types. Available course types are - honor, hybrid, webbased, xlo, spanish, offsite_ind, supplemental_instruction, learning_community, fast_track_transfer. 
        :param str instructor: Get courses by Instructor first or last name. 
        :param str instructor_first_name: Get courses by Instructor First name. 
        :param str instructor_last_name: Get courses by Instructor Last name. 
        :param str day: Get courses by Day class time. 
        :param str evening: Get courses by Evening class time. 
        :param str day_or_evening_code: Get courses by Day or Evening class time. 
        :param list[str] days: Get courses by Days of a week. 
        :param float units: Get courses by units. 
        :param float min_units: Get courses by minimum units. 
        :param float max_units: Get courses by maximum units. 
        :param str meet_begin_time: Get courses by meeting begin time. The time values are in 4 digits 24 hours format. 8am will be 0800 and 4.30pm will be 1630. 
        :param float meet_end_time: Get courses by meeting end time. The time values are in 4 digits 24 hours format. 8am will be 0800 and 4.30pm will be 1630. 
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['limit', 'page', 's', 'crn', 'college_code', 'college_desc', 'term_code', 'term_desc', 'department_desc', 'course_types', 'instructor', 'instructor_first_name', 'instructor_last_name', 'day', 'evening', 'day_or_evening_code', 'days', 'units', 'min_units', 'max_units', 'meet_begin_time', 'meet_end_time']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_courses_by_query" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 's' in params:
            query_params.append(('s', params['s']))  # noqa: E501
        if 'crn' in params:
            query_params.append(('crn', params['crn']))  # noqa: E501
            collection_formats['crn'] = 'csv'  # noqa: E501
        if 'college_code' in params:
            query_params.append(('college_code', params['college_code']))  # noqa: E501
            collection_formats['college_code'] = 'csv'  # noqa: E501
        if 'college_desc' in params:
            query_params.append(('college_desc', params['college_desc']))  # noqa: E501
            collection_formats['college_desc'] = 'csv'  # noqa: E501
        if 'term_code' in params:
            query_params.append(('term_code', params['term_code']))  # noqa: E501
            collection_formats['term_code'] = 'csv'  # noqa: E501
        if 'term_desc' in params:
            query_params.append(('term_desc', params['term_desc']))  # noqa: E501
            collection_formats['term_desc'] = 'csv'  # noqa: E501
        if 'department_desc' in params:
            query_params.append(('department_desc', params['department_desc']))  # noqa: E501
        if 'course_types' in params:
            query_params.append(('course_types', params['course_types']))  # noqa: E501
            collection_formats['course_types'] = 'csv'  # noqa: E501
        if 'instructor' in params:
            query_params.append(('instructor', params['instructor']))  # noqa: E501
        if 'instructor_first_name' in params:
            query_params.append(('instructor_first_name', params['instructor_first_name']))  # noqa: E501
        if 'instructor_last_name' in params:
            query_params.append(('instructor_last_name', params['instructor_last_name']))  # noqa: E501
        if 'day' in params:
            query_params.append(('day', params['day']))  # noqa: E501
        if 'evening' in params:
            query_params.append(('evening', params['evening']))  # noqa: E501
        if 'day_or_evening_code' in params:
            query_params.append(('day_or_evening_code', params['day_or_evening_code']))  # noqa: E501
        if 'days' in params:
            query_params.append(('days', params['days']))  # noqa: E501
            collection_formats['days'] = 'csv'  # noqa: E501
        if 'units' in params:
            query_params.append(('units', params['units']))  # noqa: E501
        if 'min_units' in params:
            query_params.append(('min_units', params['min_units']))  # noqa: E501
        if 'max_units' in params:
            query_params.append(('max_units', params['max_units']))  # noqa: E501
        if 'meet_begin_time' in params:
            query_params.append(('meet_begin_time', params['meet_begin_time']))  # noqa: E501
        if 'meet_end_time' in params:
            query_params.append(('meet_end_time', params['meet_end_time']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+xml', 'application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['directory_auth']  # noqa: E501

        return self.api_client.call_api(
            '/courses', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_courses_by_term_crn(self, term_code, crn, **kwargs):  # noqa: E501
        """Get course with term code and crn  # noqa: E501

        Returns a single course within available terms  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_courses_by_term_crn(term_code, crn, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float term_code: Term code of the year (eg. 201705 = Summer 2017) (required)
        :param float crn: CRN number of the course (eg. 50001) (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_courses_by_term_crn_with_http_info(term_code, crn, **kwargs)  # noqa: E501
        else:
            (data) = self.get_courses_by_term_crn_with_http_info(term_code, crn, **kwargs)  # noqa: E501
            return data

    def get_courses_by_term_crn_with_http_info(self, term_code, crn, **kwargs):  # noqa: E501
        """Get course with term code and crn  # noqa: E501

        Returns a single course within available terms  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_courses_by_term_crn_with_http_info(term_code, crn, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float term_code: Term code of the year (eg. 201705 = Summer 2017) (required)
        :param float crn: CRN number of the course (eg. 50001) (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['term_code', 'crn']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_courses_by_term_crn" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'term_code' is set
        if ('term_code' not in params or
                params['term_code'] is None):
            raise ValueError("Missing the required parameter `term_code` when calling `get_courses_by_term_crn`")  # noqa: E501
        # verify the required parameter 'crn' is set
        if ('crn' not in params or
                params['crn'] is None):
            raise ValueError("Missing the required parameter `crn` when calling `get_courses_by_term_crn`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'term_code' in params:
            path_params['term_code'] = params['term_code']  # noqa: E501
        if 'crn' in params:
            path_params['crn'] = params['crn']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+xml', 'application/hal+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['directory_auth']  # noqa: E501

        return self.api_client.call_api(
            '/courses/{term_code}/{crn}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
